name: govulncheck

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  release:
    types: [published]

permissions:
  contents: read
  security-events: write # required for SARIF upload

jobs:
  vulncheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Ensure jq (for severity evaluation)
        run: |
          jq --version || (sudo apt-get update && sudo apt-get install -y jq)

      - name: Run govulncheck (SARIF)
        run: govulncheck -format sarif -o govulncheck.sarif ./...

      - name: Upload SARIF to code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: govulncheck.sarif
          category: govulncheck

      - name: Run govulncheck (JSON)
        run: govulncheck -format json ./... > govulncheck.json || true

      - name: Evaluate High/Critical vulnerabilities
        id: severity
        run: |
          set -euo pipefail
          if [ ! -s govulncheck.json ]; then echo "high_crit_count=0" >> "$GITHUB_OUTPUT"; echo "fail=false" >> "$GITHUB_OUTPUT"; exit 0; fi
          count=$(jq -r '
            [ .vulns[]? 
              | ((.osv.database_specific.severity? // "") | ascii_upcase) as $lab
              | (if $lab=="CRITICAL" then 9 elif $lab=="HIGH" then 7 else 0 end) as $labelScore
              | ((.osv.severity? // [])
                  | map((.score // "") as $s
                        | if ($s|test("^[0-9.]+$")) then ($s|tonumber)
                          elif ($s|test("CRITICAL";"i")) then 9
                          elif ($s|test("HIGH";"i")) then 7
                          else 0 end)
                  | max // 0) as $cvssScore
              | ([ $labelScore, $cvssScore ] | max) as $maxSev
              | select($maxSev >= 7)
            ] | length' govulncheck.json)
          echo "High/Critical vulnerabilities: $count" >> "$GITHUB_STEP_SUMMARY"
          echo "high_crit_count=$count" >> "$GITHUB_OUTPUT"
          if [ "$count" -gt 0 ]; then echo "fail=true" >> "$GITHUB_OUTPUT"; else echo "fail=false" >> "$GITHUB_OUTPUT"; fi

      - name: Fail on High/Critical
        if: steps.severity.outputs.fail == 'true'
        run: |
          echo "❌ High/Critical vulnerabilities detected: ${{ steps.severity.outputs.high_crit_count }}" >> "$GITHUB_STEP_SUMMARY"
          exit 1
