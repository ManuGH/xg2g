# Code Coverage Workflow
# Generates coverage reports, badges, and publishes to GitHub Pages

name: Code Coverage

on:
  push:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/coverage.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  coverage:
    name: Generate Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run tests with coverage
        run: |
          echo "::group::Running tests with coverage"
          go test -v -covermode=atomic -coverprofile=coverage.out -coverpkg=./... ./... 2>&1 | tee test-output.log
          echo "::endgroup::"

      - name: Calculate coverage percentage
        id: coverage
        run: |
          # Calculate total coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

          # Set color based on coverage
          if (( $(echo "$COVERAGE >= 70" | bc -l) )); then
            echo "color=brightgreen" >> $GITHUB_OUTPUT
          elif (( $(echo "$COVERAGE >= 50" | bc -l) )); then
            echo "color=yellow" >> $GITHUB_OUTPUT
          else
            echo "color=red" >> $GITHUB_OUTPUT
          fi

      - name: Generate HTML coverage report
        run: |
          echo "::group::Generating HTML coverage report"
          go tool cover -html=coverage.out -o coverage.html
          echo "::endgroup::"

      - name: Generate detailed coverage report
        run: |
          echo "::group::Detailed coverage by package"
          go tool cover -func=coverage.out | tee coverage-detailed.txt
          echo "::endgroup::"

      - name: Create coverage summary for PR
        if: github.event_name == 'pull_request'
        run: |
          cat > coverage-summary.md <<EOF
          ## 📊 Code Coverage Report

          **Overall Coverage**: ${{ steps.coverage.outputs.coverage }}%

          ### Coverage by Package

          \`\`\`
          $(go tool cover -func=coverage.out | grep -v "total:" | head -20)
          \`\`\`

          <details>
          <summary>📈 Full Coverage Details</summary>

          \`\`\`
          $(go tool cover -func=coverage.out)
          \`\`\`

          </details>

          ---
          *Coverage report generated on $(date)*
          EOF

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('coverage-summary.md', 'utf8');

            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📊 Code Coverage Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }

      - name: Update coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true  # Badge is optional - don't fail if gist doesn't exist
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.GIST_ID }}
          filename: xg2g-coverage.json
          label: coverage
          message: ${{ steps.coverage.outputs.coverage }}%
          color: ${{ steps.coverage.outputs.color }}

      - name: Add coverage to job summary
        if: always()
        run: |
          echo "## 📊 Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Total Coverage**: ${{ steps.coverage.outputs.coverage }}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Top Coverage by Package" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          go tool cover -func=coverage.out | grep -v "total:" | sort -k3 -nr | head -10 >> $GITHUB_STEP_SUMMARY || true
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-xg2g
          fail_ci_if_error: false
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Archive coverage reports
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: coverage-reports
          path: |
            coverage.out
            coverage.html
            coverage-detailed.txt
          retention-days: 30

      - name: Prepare coverage for GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          mkdir -p public
          cp coverage.html public/index.html

          # Create index page with badge and link
          cat > public/README.md <<EOF
          # xg2g Coverage Report

          ![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/GITHUB_USERNAME/GIST_ID/raw/xg2g-coverage.json)

          [View detailed coverage report](./index.html)

          Last updated: $(date)
          EOF

      - name: Upload to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v4
        with:
          path: public

  deploy-pages:
    name: Deploy to GitHub Pages
    needs: coverage
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    continue-on-error: true  # GitHub Pages deployment is optional

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        continue-on-error: true  # Don't fail if GitHub Pages is not configured
        uses: actions/deploy-pages@v4

  coverage-guard:
    name: Coverage Quality Gate
    runs-on: ubuntu-latest
    needs: coverage
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run coverage check
        run: |
          go test -covermode=atomic -coverprofile=coverage.out ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')

          # Minimum coverage threshold
          THRESHOLD=50

          echo "Current coverage: $COVERAGE%"
          echo "Threshold: $THRESHOLD%"

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
          fi
