name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Weekly security scan every Monday at 3 AM UTC
    - cron: "0 3 * * 1"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read # for detecting self-mutation

jobs:
  gosec:
    name: Go Security Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install gosec (pinned prebuilt)
        run: |
          set -euo pipefail
          VERSION="v2.21.3"
          curl -sSfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b /usr/local/bin "${VERSION}"
          gosec -version

      - name: Run GoSec Security Scanner (SARIF)
        run: |
          gosec -fmt sarif -out gosec.sarif ./... || true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
          category: gosec-scan

  security-regression:
    name: Security Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Intensive symlink security tests
        run: |
          echo "üîÑ Running intensive security regression tests..."
          # Run symlink tests multiple times to catch race conditions
          go test ./cmd/daemon -run TestEnsureDataDirSymlinkPolicy -race -count=10
          go test ./internal/api -run TestSecureFileHandlerSymlinkPolicy -race -count=10
          echo "‚úÖ Security regression tests completed"

      - name: Security pattern enforcement
        run: |
          echo "üìã Enforcing security coding patterns..."
          # Ensure no new insecure patterns are introduced
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*err\.Error\(\)' && (echo "‚ùå New err.Error() exposure detected" && exit 1) || true
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*http\.FileServer' && (echo "‚ùå New FileServer usage detected" && exit 1) || true
          echo "‚úÖ No new security anti-patterns detected"
