name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Weekly security scan every Monday at 3 AM UTC
    - cron: "0 3 * * 1"

permissions:
  contents: read
  security-events: write
  actions: read # for detecting self-mutation

jobs:
  gosec:
    name: Go Security Scanner
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Run GoSec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-no-fail -fmt sarif -out results.sarif ./..."
          # -no-fail: report issues without failing the job
          # -fmt sarif: output in SARIF format for GitHub to ingest
          # -out: specify output file
          # ./...: scan all packages

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: gosec-scan

  govulncheck:
    name: Go Vulnerability Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Run govulncheck
        run: |
          set -euo pipefail
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck -json ./... | tee govuln.json

      - name: Convert govulncheck to SARIF
        run: |
          set -euo pipefail
          # Minimal JSON‚ÜíSARIF conversion with jq (keeps summary details)
          echo '{"version":"2.1.0","$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json","runs":[{"tool":{"driver":{"name":"govulncheck","version":"latest"}},"results":[]}]}' > govuln.sarif
          if command -v jq >/dev/null 2>&1; then
            HIGH=$(jq '[.vulns[] | select(.modules[].packages[].callstacks != null) | select(.severity == "HIGH")] | length' govuln.json 2>/dev/null || echo 0)
            CRIT=$(jq '[.vulns[] | select(.modules[].packages[].callstacks != null) | select(.severity == "CRITICAL")] | length' govuln.json 2>/dev/null || echo 0)
          else
            HIGH=0; CRIT=0
          fi
          echo "High: ${HIGH}, Critical: ${CRIT}" | tee -a "$GITHUB_STEP_SUMMARY"
          if [ "${HIGH}" != "0" ] || [ "${CRIT}" != "0" ]; then
            echo "‚ùå High/Critical vulnerabilities detected" >&2
            exit 1
          fi

      - name: Upload govulncheck SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: govuln.sarif
          category: govulncheck

  security-regression:
    name: Security Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Intensive symlink security tests
        run: |
          echo "üîÑ Running intensive security regression tests..."
          # Run symlink tests multiple times to catch race conditions
          go test ./cmd/daemon -run TestEnsureDataDirSymlinkPolicy -race -count=10
          go test ./internal/api -run TestSecureFileHandlerSymlinkPolicy -race -count=10
          echo "‚úÖ Security regression tests completed"

      - name: Security pattern enforcement
        run: |
          echo "üìã Enforcing security coding patterns..."
          # Ensure no new insecure patterns are introduced
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*err\.Error\(\)' && (echo "‚ùå New err.Error() exposure detected" && exit 1) || true
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*http\.FileServer' && (echo "‚ùå New FileServer usage detected" && exit 1) || true
          echo "‚úÖ No new security anti-patterns detected"
