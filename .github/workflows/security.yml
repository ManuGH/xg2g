name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Weekly security scan every Monday at 3 AM UTC
    - cron: "0 3 * * 1"

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run vulnerability check
        run: |
          echo "🔍 Scanning for known CVE vulnerabilities..."
          govulncheck ./...

      - name: Run security-focused tests
        run: |
          echo "🧪 Running security test suite..."
          go test ./... -race -count=1 -tags security

      - name: Symlink security validation
        run: |
          echo "🔗 Validating symlink attack prevention..."
          # Test startup symlink policy
          go test ./cmd/daemon -run TestEnsureDataDirSymlinkPolicy -race -v || (echo "❌ Startup symlink policy failed" && exit 1)
          # Test runtime file handler security
          go test ./internal/api -run TestSecureFileHandlerSymlinkPolicy -race -v || (echo "❌ HTTP handler security failed" && exit 1)
          echo "✅ Symlink security tests passed"

      - name: Validate input sanitization
        run: |
          echo "🛡️ Checking input validation patterns..."
          # Check for potential security anti-patterns
          ! grep -r "err\.Error()" internal/ || (echo "❌ Found err.Error() exposure" && exit 1)
          ! grep -r "Access-Control-Allow-Origin.*\*" internal/ || (echo "❌ Found permissive CORS" && exit 1)
          grep -r "filepath\.Abs" internal/jobs/ || (echo "❌ Missing path validation" && exit 1)
          # Symlink security pattern validation
          grep -r "filepath\.EvalSymlinks" cmd/daemon/ || (echo "❌ Missing symlink resolution in startup" && exit 1)
          grep -r "filepath\.EvalSymlinks" internal/api/ || (echo "❌ Missing symlink resolution in HTTP handler" && exit 1)
          ! grep -r "http\.FileServer" internal/api/ || (echo "❌ Found insecure FileServer usage" && exit 1)
          echo "✅ Input validation checks passed"

      - name: Docker security baseline
        run: |
          echo "🐳 Docker security validation..."
          # Check Dockerfile for security best practices
          grep "USER.*[0-9]" Dockerfile || (echo "❌ Missing non-root user" && exit 1)
          grep "alpine:" Dockerfile || (echo "❌ Not using minimal base image" && exit 1)
          grep "adduser.*-D" Dockerfile || (echo "❌ Missing secure user creation" && exit 1)
          echo "✅ Container security checks passed"

      - name: Security summary
        run: |
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ No known CVE vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Race condition tests passed" >> $GITHUB_STEP_SUMMARY  
          echo "- ✅ Input validation patterns verified" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Symlink attack prevention validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Container security baseline met" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Status**: 🟢 PRODUCTION READY" >> $GITHUB_STEP_SUMMARY

  security-regression:
    name: Security Regression Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.25"
          cache: true

      - name: Intensive symlink security tests
        run: |
          echo "🔄 Running intensive security regression tests..."
          # Run symlink tests multiple times to catch race conditions
          go test ./cmd/daemon -run TestEnsureDataDirSymlinkPolicy -race -count=10
          go test ./internal/api -run TestSecureFileHandlerSymlinkPolicy -race -count=10
          echo "✅ Security regression tests completed"

      - name: Security pattern enforcement
        run: |
          echo "📋 Enforcing security coding patterns..."
          # Ensure no new insecure patterns are introduced
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*err\.Error\(\)' && (echo "❌ New err.Error() exposure detected" && exit 1) || true
          git diff HEAD~1..HEAD -- '*.go' | grep -E '^\+.*http\.FileServer' && (echo "❌ New FileServer usage detected" && exit 1) || true
          echo "✅ No new security anti-patterns detected"
