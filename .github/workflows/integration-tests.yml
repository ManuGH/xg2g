# Integration Tests Workflow
# Fast smoke tests run on every PR/push (< 2min)
# Full integration suite runs on merge to main + nightly

name: Integration Tests

on:
  push:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/integration-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
  schedule:
    # Nightly full integration run at 02:00 UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_level:
        description: 'Test level to run'
        required: true
        default: 'fast'
        type: choice
        options:
          - fast
          - full
          - slow

permissions:
  contents: read

jobs:
  # Fast smoke tests - critical path only (< 2min)
  # Run on every PR to catch critical regressions early
  smoke-tests:
    name: Smoke Tests (Critical Path)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.test_level == 'fast')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run fast integration tests
        run: |
          echo "::group::Smoke Tests (< 2min)"
          go test -v -tags=integration_fast,nogpu -timeout=3m ./test/integration/... \
            -run="^TestSmoke" \
            2>&1 | tee test-output.log
          echo "::endgroup::"

      - name: Test Summary
        if: always()
        run: |
          if grep -q "FAIL" test-output.log; then
            echo "❌ Critical smoke tests failed - blocking PR"
            exit 1
          else
            echo "✅ All critical smoke tests passed"
          fi

  # Full integration suite - all tests including slow ones
  # Run on push to main, nightly, and manual dispatch
  full-integration:
    name: Full Integration Suite
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_level != 'fast')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run all integration tests
        run: |
          echo "::group::Full Integration Suite"
          go test -v -tags=integration,nogpu -timeout=5m ./test/integration/... \
            2>&1 | tee full-test-output.log
          echo "::endgroup::"

      - name: Generate test report
        if: always()
        run: |
          echo "## Integration Test Results" >> $GITHUB_STEP_SUMMARY

          # Count test results
          TOTAL=$(grep -c "^--- PASS:\|^--- FAIL:" full-test-output.log || echo "0")
          PASSED=$(grep -c "^--- PASS:" full-test-output.log || echo "0")
          FAILED=$(grep -c "^--- FAIL:" full-test-output.log || echo "0")

          echo "- **Total Tests**: $TOTAL" >> $GITHUB_STEP_SUMMARY
          echo "- **Passed**: ✅ $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- **Failed**: ❌ $FAILED" >> $GITHUB_STEP_SUMMARY

          # Extract timing
          if grep -q "^ok" full-test-output.log; then
            DURATION=$(grep "^ok" full-test-output.log | awk '{print $3}')
            echo "- **Duration**: ⏱️ ${DURATION}" >> $GITHUB_STEP_SUMMARY
          fi

          # Show failures if any
          if [ "$FAILED" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ❌ Failed Tests" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep "^--- FAIL:" full-test-output.log >> $GITHUB_STEP_SUMMARY || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: integration-test-logs
          path: full-test-output.log
          retention-days: 7

  # Slow/deep tests - timeout scenarios, recovery flows
  # Only run nightly or on manual trigger
  slow-tests:
    name: Slow Tests (Deep Validation)
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.test_level == 'slow')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Run slow integration tests
        run: |
          echo "::group::Slow Tests (Deep Validation)"
          go test -v -tags=integration_slow,nogpu -timeout=10m ./test/integration/... \
            -run="^TestSlow" \
            2>&1 | tee slow-test-output.log
          echo "::endgroup::"

      - name: Summary
        if: always()
        run: |
          echo "## Slow Test Results" >> $GITHUB_STEP_SUMMARY
          PASSED=$(grep -c "^--- PASS:" slow-test-output.log || echo "0")
          FAILED=$(grep -c "^--- FAIL:" slow-test-output.log || echo "0")
          echo "- Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
          echo "- Failed: $FAILED" >> $GITHUB_STEP_SUMMARY

  # Matrix test - run fast tests across Go versions
  compatibility:
    name: Go Version Compatibility
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Run smoke tests
        run: |
          go test -tags=integration_fast,nogpu -timeout=3m ./test/integration/... \
            -run="^TestSmoke"

      - name: Report compatibility
        if: always()
        run: |
          echo "✅ Go ${{ matrix.go-version }} compatibility verified"
