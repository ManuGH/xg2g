name: SBOM Generation

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write  # For uploading SBOM as release asset
  packages: write  # For Docker image SBOM

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          cache: true

      - name: Build binary
        run: |
          BUILD_REF="${GITHUB_SHA:-dev}"
          go build -v -trimpath -mod=readonly -buildvcs=false \
            -ldflags "-X main.Version=${BUILD_REF}" \
            -o xg2g ./cmd/daemon

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.0

      - name: Generate CycloneDX SBOM (JSON)
        run: |
          syft packages ./xg2g \
            --output cyclonedx-json \
            --file sbom.cyclonedx.json

      - name: Generate CycloneDX SBOM (XML)
        run: |
          syft packages ./xg2g \
            --output cyclonedx-xml \
            --file sbom.cyclonedx.xml

      - name: Generate SPDX SBOM
        run: |
          syft packages ./xg2g \
            --output spdx-json \
            --file sbom.spdx.json

      - name: Generate Syft JSON (detailed)
        run: |
          syft packages ./xg2g \
            --output syft-json \
            --file sbom.syft.json

      - name: Generate human-readable SBOM
        run: |
          syft packages ./xg2g \
            --output table \
            --file sbom.txt

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ github.sha }}
          path: |
            sbom.cyclonedx.json
            sbom.cyclonedx.xml
            sbom.spdx.json
            sbom.syft.json
            sbom.txt
          retention-days: 90

      - name: Verify SBOM completeness
        run: |
          # Check that SBOM contains expected Go dependencies
          if ! grep -q "github.com/gorilla/mux" sbom.cyclonedx.json; then
            echo "ERROR: SBOM missing expected dependency (gorilla/mux)"
            exit 1
          fi
          echo "âœ… SBOM verification passed"

      - name: Generate SBOM summary
        run: |
          echo "## SBOM Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Formats Generated" >> $GITHUB_STEP_SUMMARY
          echo "- CycloneDX JSON (industry standard)" >> $GITHUB_STEP_SUMMARY
          echo "- CycloneDX XML (alternative format)" >> $GITHUB_STEP_SUMMARY
          echo "- SPDX JSON (Linux Foundation standard)" >> $GITHUB_STEP_SUMMARY
          echo "- Syft JSON (detailed metadata)" >> $GITHUB_STEP_SUMMARY
          echo "- Human-readable table" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Component Count" >> $GITHUB_STEP_SUMMARY
          COMPONENT_COUNT=$(jq '.components | length' sbom.cyclonedx.json)
          echo "- Total components: $COMPONENT_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Top 10 Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -20 sbom.txt | tail -10 >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Upload SBOM to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            sbom.cyclonedx.json
            sbom.cyclonedx.xml
            sbom.spdx.json
            sbom.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-sbom:
    name: Generate Docker Image SBOM
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: xg2g:sbom
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@v0.20.0

      - name: Generate Docker image SBOM
        run: |
          syft packages docker:xg2g:sbom \
            --output cyclonedx-json \
            --file docker-sbom.cyclonedx.json

      - name: Generate Docker SPDX SBOM
        run: |
          syft packages docker:xg2g:sbom \
            --output spdx-json \
            --file docker-sbom.spdx.json

      - name: Generate Docker SBOM table
        run: |
          syft packages docker:xg2g:sbom \
            --output table \
            --file docker-sbom.txt

      - name: Upload Docker SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-sbom-${{ github.sha }}
          path: |
            docker-sbom.cyclonedx.json
            docker-sbom.spdx.json
            docker-sbom.txt
          retention-days: 90

      - name: Docker SBOM summary
        run: |
          echo "## Docker Image SBOM" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Component Count" >> $GITHUB_STEP_SUMMARY
          DOCKER_COMPONENTS=$(jq '.components | length' docker-sbom.cyclonedx.json)
          echo "- Docker image components: $DOCKER_COMPONENTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Sample Dependencies" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -15 docker-sbom.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  vulnerability-scan:
    name: Scan SBOM for Vulnerabilities
    runs-on: ubuntu-latest
    needs: generate-sbom
    steps:
      - name: Download SBOM
        uses: actions/download-artifact@v6
        with:
          name: sbom-${{ github.sha }}

      - name: Install Grype (vulnerability scanner)
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan SBOM for vulnerabilities
        run: |
          grype sbom:sbom.cyclonedx.json \
            --output table \
            --file vulnerabilities.txt

      - name: Scan for HIGH/CRITICAL only
        run: |
          grype sbom:sbom.cyclonedx.json \
            --fail-on high \
            --output json \
            --file vulnerabilities.json || echo "Vulnerabilities found"

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-report-${{ github.sha }}
          path: |
            vulnerabilities.txt
            vulnerabilities.json
          retention-days: 90

      - name: Vulnerability summary
        run: |
          echo "## Vulnerability Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f vulnerabilities.txt ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            head -30 vulnerabilities.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "âœ… No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment PR with vulnerabilities
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = '## ðŸ”’ Security Scan Results\n\n';

            if (fs.existsSync('vulnerabilities.txt')) {
              const vulns = fs.readFileSync('vulnerabilities.txt', 'utf8');
              const lines = vulns.split('\n').slice(0, 20);
              body += '### Vulnerabilities Found\n\n```\n' + lines.join('\n') + '\n```\n';
              body += '\nðŸ“Š Full report available in workflow artifacts.';
            } else {
              body += 'âœ… No vulnerabilities detected in dependencies.';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
