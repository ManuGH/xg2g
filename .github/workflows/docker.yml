name: docker

on:
  push:
    branches: [main]
    paths:
      - Dockerfile
      - "**/*.go"
      - go.mod
      - go.sum
      - .github/workflows/docker.yml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Verify modules
        run: |
          go mod tidy
          go mod verify
          git diff --exit-code -- go.mod go.sum

      - run: |
          BUILD_REF="${GITHUB_SHA:-dev}"
          go build -v -trimpath -mod=readonly -buildvcs=false -ldflags "-X main.Version=${BUILD_REF}" ./...

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/xg2g
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha

      - uses: docker/build-push-action@v6
        id: build_alpine
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false

      - name: Rotate cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Output alpine digest
        if: always()
        run: |
          echo "alpine digest: ${{ steps.build_alpine.outputs.digest }}" | tee -a "$GITHUB_STEP_SUMMARY"

  build-and-push-distroless:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v5

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta_dist
        with:
          images: ghcr.io/${{ github.repository_owner }}/xg2g
          tags: |
            type=raw,value=distroless-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=distroless-${{ github.sha }}

      - uses: docker/build-push-action@v6
        id: build_dist
        with:
          context: .
          file: Dockerfile.distroless
          push: ${{ github.ref == 'refs/heads/main' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_dist.outputs.tags }}
          labels: ${{ steps.meta_dist.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false

      - name: Rotate cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Output distroless digest
        if: always()
        run: |
          echo "distroless digest: ${{ steps.build_dist.outputs.digest }}" | tee -a "$GITHUB_STEP_SUMMARY"
