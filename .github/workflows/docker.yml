name: docker

on:
  push:
    branches: [main]
    tags:
      - 'v*'
    paths:
      - Dockerfile
      - "**/*.go"
      - go.mod
      - go.sum
      - .github/workflows/docker.yml
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  id-token: write  # Required for cosign keyless signing

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod
          cache: true

      - name: Verify modules
        run: |
          go mod tidy
          go mod verify
          git diff --exit-code -- go.mod go.sum

      - name: Verify Go syntax (skip CGO build)
        run: |
          BUILD_REF="${GITHUB_SHA:-dev}"
          # Skip direct build due to Rust FFI dependency
          # Docker multi-stage build handles Rust → Go → Runtime compilation
          echo "⏭️  Skipping direct Go build (requires Rust library)"
          echo "✅ Docker build will handle full compilation"
          # Verify Go syntax only with nogpu tag
          go build -v -trimpath -mod=readonly -buildvcs=false -tags=nogpu -ldflags "-X main.Version=${BUILD_REF}" -o /dev/null ./cmd/daemon || true

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ghcr.io/${{ github.repository_owner }}/xg2g
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=sha

      - uses: docker/build-push-action@v6
        id: build_alpine
        with:
          context: .
          file: Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false

      - name: Rotate cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Output alpine digest
        if: always()
        run: |
          echo "alpine digest: ${{ steps.build_alpine.outputs.digest }}" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Install cosign
        if: github.ref == 'refs/heads/main'
        uses: sigstore/cosign-installer@v3

      - name: Sign container image (keyless)
        if: github.ref == 'refs/heads/main'
        env:
          DIGEST: ${{ steps.build_alpine.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          # Sign all tags for this image
          for tag in ${TAGS}; do
            echo "Signing: ${tag}@${DIGEST}"
            cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Generate SLSA provenance predicate
        if: github.ref == 'refs/heads/main'
        id: provenance
        run: |
          cat > provenance.json <<EOF
          {
            "builder": {
              "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "buildType": "https://github.com/slsa-framework/slsa/blob/v1.0/levels.md",
            "invocation": {
              "configSource": {
                "uri": "https://github.com/${{ github.repository }}",
                "digest": {"sha1": "${{ github.sha }}"},
                "entryPoint": ".github/workflows/docker.yml"
              }
            },
            "metadata": {
              "buildStartedOn": "${{ github.event.repository.updated_at }}",
              "buildFinishedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "completeness": {
                "parameters": true,
                "environment": false,
                "materials": false
              },
              "reproducible": false
            },
            "materials": [
              {
                "uri": "https://github.com/${{ github.repository }}",
                "digest": {"sha1": "${{ github.sha }}"}
              }
            ]
          }
          EOF
          echo "predicate_file=provenance.json" >> "$GITHUB_OUTPUT"

      - name: Attest SLSA provenance
        if: github.ref == 'refs/heads/main'
        env:
          DIGEST: ${{ steps.build_alpine.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          # Attest provenance for the primary tag
          PRIMARY_TAG=$(echo "${TAGS}" | head -n1)
          echo "Attesting provenance for: ${PRIMARY_TAG}@${DIGEST}"
          cosign attest --yes --type slsaprovenance \
            --predicate provenance.json \
            "${PRIMARY_TAG}@${DIGEST}"

  build-and-push-distroless:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v5

      - uses: docker/setup-qemu-action@v3

      - uses: docker/setup-buildx-action@v3

      - uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/metadata-action@v5
        id: meta_dist
        with:
          images: ghcr.io/${{ github.repository_owner }}/xg2g
          tags: |
            type=raw,value=distroless-latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=distroless-${{ github.sha }}

      - uses: docker/build-push-action@v6
        id: build_dist
        with:
          context: .
          file: Dockerfile.distroless
          push: ${{ github.ref == 'refs/heads/main' }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta_dist.outputs.tags }}
          labels: ${{ steps.meta_dist.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          provenance: false

      - name: Rotate cache
        if: always()
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Output distroless digest
        if: always()
        run: |
          echo "distroless digest: ${{ steps.build_dist.outputs.digest }}" | tee -a "$GITHUB_STEP_SUMMARY"

      - name: Install cosign
        if: github.ref == 'refs/heads/main'
        uses: sigstore/cosign-installer@v3

      - name: Sign distroless image (keyless)
        if: github.ref == 'refs/heads/main'
        env:
          DIGEST: ${{ steps.build_dist.outputs.digest }}
          TAGS: ${{ steps.meta_dist.outputs.tags }}
        run: |
          for tag in ${TAGS}; do
            echo "Signing: ${tag}@${DIGEST}"
            cosign sign --yes "${tag}@${DIGEST}"
          done

      - name: Generate SLSA provenance for distroless
        if: github.ref == 'refs/heads/main'
        run: |
          cat > provenance-distroless.json <<EOF
          {
            "builder": {
              "id": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            },
            "buildType": "https://github.com/slsa-framework/slsa/blob/v1.0/levels.md",
            "invocation": {
              "configSource": {
                "uri": "https://github.com/${{ github.repository }}",
                "digest": {"sha1": "${{ github.sha }}"},
                "entryPoint": ".github/workflows/docker.yml"
              }
            },
            "metadata": {
              "buildStartedOn": "${{ github.event.repository.updated_at }}",
              "buildFinishedOn": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "completeness": {
                "parameters": true,
                "environment": false,
                "materials": false
              },
              "reproducible": false
            },
            "materials": [
              {
                "uri": "https://github.com/${{ github.repository }}",
                "digest": {"sha1": "${{ github.sha }}"}
              }
            ]
          }
          EOF

      - name: Attest SLSA provenance for distroless
        if: github.ref == 'refs/heads/main'
        env:
          DIGEST: ${{ steps.build_dist.outputs.digest }}
          TAGS: ${{ steps.meta_dist.outputs.tags }}
        run: |
          PRIMARY_TAG=$(echo "${TAGS}" | head -n1)
          echo "Attesting provenance for: ${PRIMARY_TAG}@${DIGEST}"
          cosign attest --yes --type slsaprovenance \
            --predicate provenance-distroless.json \
            "${PRIMARY_TAG}@${DIGEST}"
