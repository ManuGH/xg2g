# ============================================================================
# xg2g Live Test Setup - Mac optimiert
# xg2g → Threadfin → Jellyfin Stack für lokale Tests
# ============================================================================
#
# Quick Start:
#   1. Kopiere .env.example zu .env und passe die Werte an
#   2. docker-compose up -d
#   3. Öffne http://localhost:8080 (xg2g), http://localhost:34400 (Threadfin), http://localhost:8096 (Jellyfin)
#
# ============================================================================

services:
  # ──────────────────────────────────────────────────────────────────────────
  # nginx: Stream Proxy für Enigma2 (HEAD-Request-Handling)
  # ──────────────────────────────────────────────────────────────────────────
  # Benötigt für: Enigma2 Stream Relay (Port 17999) HEAD-Request Support
  # Funktion: Beantwortet HEAD-Requests mit HTTP 200 + Content-Type: video/mp2t
  #           Leitet GET-Requests transparent an Enigma2 weiter
  # Nur nötig wenn XG2G_STREAM_BASE gesetzt ist!
  nginx-stream-proxy:
    image: nginx:alpine
    container_name: nginx-stream-proxy-livetest
    restart: unless-stopped
    ports:
      - "17999:17999"   # Enigma2 Stream Relay Proxy (intercepts 10.10.55.57:17999)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - iptv-livetest
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider -O- --method=HEAD http://localhost:17999/test || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # ──────────────────────────────────────────────────────────────────────────
  # xg2g: Enigma2 → M3U + XMLTV Converter
  # ──────────────────────────────────────────────────────────────────────────
  xg2g:
    image: xg2g:livetest  # Local build with latest EPG features
    container_name: xg2g-livetest
    restart: unless-stopped
    user: "0:0"  # Root für Mac Volume Permissions
    ports:
      - "8080:8080"    # Web UI & API
      - "9090:9090"    # Prometheus Metrics
    environment:
      # ── Enigma2 Receiver Konfiguration ──
      - XG2G_OWI_BASE=${XG2G_OWI_BASE:-http://192.168.1.100}
      - XG2G_OWI_USER=${XG2G_OWI_USER:-}
      - XG2G_OWI_PASS=${XG2G_OWI_PASS:-}
      # ── Stream URLs Configuration ──
      # Wähle eine der beiden Optionen:
      #
      # Option A: Direkter TS Stream (Port 8001)
      #   - Empfohlen wenn Enigma2 HEAD-Requests unterstützt
      #   - Geringste Latenz, keine Zwischenproxy
      #   - Konfiguration:
      #     - XG2G_STREAM_PORT=8001
      #     - XG2G_STREAM_BASE nicht setzen (oder leer lassen)
      #
      # Option B: Via nginx Proxy (Port 17999)
      #   - Benötigt wenn Enigma2 Stream Relay keine HEAD-Requests unterstützt
      #   - nginx fängt HEAD-Requests ab → Threadfin kompatibel
      #   - Konfiguration:
      #     - XG2G_STREAM_PORT=17999 (beliebig, wird überschrieben)
      #     - XG2G_STREAM_BASE=http://<host-ip>:17999
      #
      # Aktuell: Option B (nginx proxy mode)
      - XG2G_STREAM_PORT=17999
      - XG2G_STREAM_BASE=http://10.10.55.193:17999

      # ── Bouquet Auswahl ──
      - XG2G_BOUQUET=${XG2G_BOUQUET:-Favourites}

      # ── EPG Konfiguration ──
      - XG2G_EPG_ENABLED=true
      - XG2G_EPG_DAYS=${XG2G_EPG_DAYS:-7}
      - XG2G_EPG_MAX_CONCURRENCY=10
      - XG2G_EPG_TIMEOUT_MS=20000
      - XG2G_EPG_RETRIES=3

      # ── Stream URLs ──
      # false = Direkte TS Streams vom Enigma2 Port 8001 (empfohlen für Threadfin)
      - XG2G_USE_WEBIF_STREAMS=false

      # ── Picons ──
      - XG2G_PICON_BASE=${XG2G_OWI_BASE:-http://192.168.1.100}

      # ── Interne Settings ──
      - XG2G_DATA=/data
      - XG2G_LISTEN=:8080
      - XG2G_XMLTV=xmltv.xml
      - XG2G_FUZZY_MAX=2
      - XG2G_METRICS_LISTEN=:9090
      - XG2G_INITIAL_REFRESH=true

      # ── Logging ──
      - XG2G_LOG_LEVEL=${XG2G_LOG_LEVEL:-info}

    volumes:
      # Lokales Verzeichnis für einfachen Zugriff während Tests
      - ./livetest-data/xg2g:/data
    networks:
      - iptv-livetest
    # Health check deaktiviert - distroless image hat kein wget/curl
    # xg2g läuft wenn der Container läuft
    # healthcheck:
    #   test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/healthz || exit 1"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 15s

  # ──────────────────────────────────────────────────────────────────────────
  # Threadfin: IPTV Proxy & Filter (xTeve Nachfolger)
  # ──────────────────────────────────────────────────────────────────────────
  threadfin:
    image: fyb3roptik/threadfin:latest
    container_name: threadfin-livetest
    restart: unless-stopped
    ports:
      - "34400:34400"   # Web UI
    environment:
      - TZ=${TZ:-Europe/Vienna}
      - THREADFIN_PORT=34400
      - THREADFIN_HOSTNAME=threadfin-livetest
    volumes:
      - ./livetest-data/threadfin/config:/home/threadfin/conf
      - ./livetest-data/threadfin/temp:/tmp/threadfin
    networks:
      - iptv-livetest
    depends_on:
      - xg2g
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:34400/web || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # ──────────────────────────────────────────────────────────────────────────
  # Jellyfin: Media Server mit Live TV Support
  # ──────────────────────────────────────────────────────────────────────────
  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin-livetest
    restart: unless-stopped
    ports:
      - "8096:8096"           # HTTP Web UI
      - "8920:8920"           # HTTPS (optional)
      - "7359:7359/udp"       # Service Discovery
      - "1900:1900/udp"       # DLNA Discovery
    environment:
      - TZ=${TZ:-Europe/Vienna}
      - JELLYFIN_PublishedServerUrl=http://localhost:8096
      # Mac GPU Hardware Acceleration (optional, für VideoToolbox)
      - JELLYFIN_FFMPEG_PATH=/usr/lib/jellyfin-ffmpeg/ffmpeg
    volumes:
      - ./livetest-data/jellyfin/config:/config
      - ./livetest-data/jellyfin/cache:/cache
      # Optional: Deine Media Library
      # - ~/Videos:/media/videos:ro
      # - ~/Music:/media/music:ro
    networks:
      - iptv-livetest
    depends_on:
      - threadfin
    # Mac-spezifisch: GPU Access für Hardware-Beschleunigung
    # devices:
    #   - /dev/dri:/dev/dri  # Intel/AMD GPU (nicht auf Mac)
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8096/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# ============================================================================
# Networks
# ============================================================================
networks:
  iptv-livetest:
    name: iptv-livetest
    driver: bridge

# ============================================================================
# Volumes Info
# ============================================================================
# Alle Daten werden in ./livetest-data/ gespeichert für einfachen Zugriff:
#
# ./livetest-data/
# ├── xg2g/
# │   ├── playlist.m3u       ← xg2g M3U Output
# │   └── xmltv.xml          ← xg2g EPG Output
# ├── threadfin/
# │   ├── config/            ← Threadfin Konfiguration
# │   └── temp/              ← Threadfin Temp Dateien
# └── jellyfin/
#     ├── config/            ← Jellyfin Konfiguration
#     └── cache/             ← Jellyfin Cache
#
# ============================================================================
