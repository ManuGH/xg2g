# Multi-stage distroless build for an ultra-lean runtime image
# Builder stage
FROM golang:1.25-alpine AS builder
WORKDIR /src
COPY go.mod go.sum ./
RUN --mount=type=cache,target=/go/pkg/mod \
  go mod download

# Copy only what we need for build (kept small by .dockerignore)
COPY . .
ARG GIT_REF
ARG VERSION
RUN --mount=type=cache,target=/root/.cache/go-build \
  BUILD_REF="${GIT_REF:-${VERSION:-dev}}" && \
  CGO_ENABLED=0 GOOS=linux \
  go build -buildvcs=false -trimpath \
  -ldflags="-s -w -X 'main.Version=${BUILD_REF}'" \
  -o /out/xg2g ./cmd/daemon

# Runtime stage (distroless with CA certs, running as root for volume compatibility)
FROM gcr.io/distroless/base-debian12:latest@sha256:9e9b50d2048db3741f86a48d939b4e4cc775f5889b3496439343301ff54cdba8
WORKDIR /app
# Copy binary
COPY --from=builder /out/xg2g /app/xg2g

# Data volume for runtime artifacts (playlist, xmltv, picons)
VOLUME ["/data"]
EXPOSE 8080
# No HEALTHCHECK in distroless; rely on orchestrator probes
ENV XG2G_DATA=/data \
  XG2G_LISTEN=:8080
ENTRYPOINT ["/app/xg2g"]
